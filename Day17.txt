*** Data Structure and Algorithm ***
=> Data Structures are used to store the Data in efficient way.
=> Algorithms make the operations faster.

=> Data Structers are: 
  *LinkedList
  *Stack
  *Queue
  *Trees
  *Graphs
 etc..

=> Algorithms: 
 * sorthing algos.
 * Searching algos.
etc..
____________________________________________________________________________________________________________________________________-
*** Time and Space Complexity:
*Ingnore Constants.
*Ignore Small Values.
*Focus on worst Case.

Time Complexity:
=> It is a way to describes how the time taken by an algorithm increases as the input size grows.

Space Complexity:
=>It is a way to describe how the amount of memory is taken by algorithm to run as the input size grows.

______________________________________________________________________________________________________________________________________
** Types of Data Structures:
=> Linear: LinkedList,Stack,Queue.
=> Non-Linear: Trees, Graphs,Heaps.
______________________________________________________________________________________________________________________________________

*** Linked Lists ***
=> It is a linear Data Sructure. it stores the similar type of data in non-continuous memory  and connects through adress of next node.
=> appearence: 
[data/next] -> [data/next] -> [data/next] -> [data/null]
=> It is Used for Fater insertion and Faster Deletions.
=>Insertion can be done in constant Time. O(1).
***Types:
  -> Single LikedList
  -> Doubly Liked List
  -> Circular Liked List

=> structure of single Linked List:
class Node
{
    int val;
    Node next;
    
    Node(int val)   // This Constructor is only acepting val 
    {
        this.val=val;
    }
    Node(int val,Node next) // This Constructor is  acepting val  and next node Address.
    {
        this.val=val;
        this.next=next;
    }
}
____________________________________________________________________________________________________________________________________________
Q: Store the Array Elements in Linked List.
arr[]={1,2,3,4,5}; 
Code:

class Node
{
    int val;
    Node next;
    
    Node(int val)
    {
        this.val=val;
        this.next=null;
    }
    Node(int val,Node next)
    {
        this.val=val;
        this.next=next;
    }
}
class Main
{
    static Node convert(int[] arr)
    {
        Node head=new Node(arr[0]);
        Node cur=head;
        
        for(int i=1;i<arr.length;i++)
        {
            Node temp=new Node(arr[i]);
            cur.next=temp;
            cur=temp;
        }
        return head;
    }
    static void print(Node head)
    {
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.val+" -> ");
            temp=temp.next;
        }
        System.out.print("end");
    }
    public static void main(String args[])
    {
      int arr[]={1,2,3,4,5};  
      Node head=convert(arr);
      print(head);
      
    }
}

______________________________________________________________________________________________________________________________






