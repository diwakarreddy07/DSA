*** Switch Case:

=> Switch case statements are used to execute different blocks of code based on the value of a single expression.
=> Rather than writing the if else ladder.
=> Using Switch, rather than searching of number in every condition , it will directly go to the  block based on the number you have provided.

ex:
Q: Print the day based on its Number.

**code with if else ladder is: 
import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Number(1-7): ");
        int num=sc.nextInt();

              
      if(num<=7)
      {
            if(num==1)
        {
            System.out.println("Monday");
        }
      else if(num==2)
        {
            System.out.println("Tuesday");
        }
      else if(num==3)
        {
            System.out.println("Wednesday");
        }
      else if(num==4)
        {
            System.out.println("Thursday");
        }
      else if(num==5)
        {
            System.out.println("Fruday");
        }
      else if(num==6)
        {
            System.out.println("Saturday");
        }
        else
        {
            System.out.println("Sunday");
        }
      }
      else
      {
          System.out.println("Not a Valid Day");
      }
    }
}

the code is loo lenghy: so:
code in Switch:
--------------

import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Number(1-7): ");
        int num=sc.nextInt();
    if(num<=7)
      {
          switch(num)
          {
              case 1:
                  System.out.println("Monday");
                  break;
              case 2:
                  System.out.println("Tuesday");
                  break;
              case 3:
                  System.out.println("Wednesday");
                  break;
              case 4:
                  System.out.println("Thursday");
                  break;
              case 5:
                  System.out.println("Friday");
                  break;
              case 6:
                  System.out.println("saturday");
                  break;
              default:
                  System.out.println("Sunday");
                  
          }
         
      }
       else
          {
              System.out.println("Not a valid Day Number");
          }
  }
  }

----------------------------------------------------------------------------------
=> Although we are writing in switch it is still messy : so write using using Lambda switch case:
=> this is going to reduce the length of the code , and it wil be clean
import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Number(1-7): ");
        int num=sc.nextInt();

    if(num<=7)
    {
        switch(num)
        {
            case 1-> System.out.println("Monday");
            case 2->System.out.println("Tuesday");
            case 3->System.out.println("Wednesday");
            case 4-> System.out.println("Thursday");
            case 5->System.out.println("Friday");
            case 6->System.out.println("saturday");
            default->System.out.println("Sunday");
             
        }
       
    }
     else
        {
            System.out.println("Not a valid Day Number");
        }
}
}
_______________________________________________________________________________
Pattern: 
=>print this: 
* * * * * 
* * * * 
* * * 
* * 
* 

code: 
-----
class Main
{
    public static void main(String args[])
    {
        int n=5;
        for(int i=1;i<=n;i++)
        {
            for(int j=n;j>=i;j--)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
----------------------------------------------------------------------------------------
** Pattern:
print this:
1
123
12345
1234567
123456789
==> here in the pattern we can observe the difference between every row in odd(1,3,5,7,9) so odd formula is 2*i-1
code:
-------
class Main
{
    public static void main(String args[])
    {
        int n=5;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=(2*i-1);j++)
            {
                System.out.print(j);
            }
            System.out.println();
        }
    }
}
--------------------------------------------------------------------------------------------
** Ternary Opertor:
=>It is a concise way to represent conditional Statement.

class Main
{
    public static void main(String args[])
    {
        int n=5;
       if(n==5)
       {
           System.out.println("Yes");
       }
       else
       {
           System.out.println("No");
       }
       
       System.out.println(res);
    }
}

//In place of writing this if else simply use ternary Operator: 

String res=(n==5)?"yes":"no";
----------------------------------------------------------------------------------------------------------

patter: Hallow Sqare
 * * * * *
 *       *
 *       *
 *       *
 * * * * *
print this using ternary operator.
=> we can observe i==1,j==1,i==n,j==5 print * else Space
code:
class Main
{
    public static void main(String args[])
    {
        int n=5;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                System.out.print((i==1|| j==5 || j==1 || i==5)?" *":"  ");
            }
            System.out.println();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------
** for each loop:
=>whenever we dont have length and whenever we dont have index values, we can use for each loop to get the elements.
=>Mostly will use the for each loop in Collections.
EG: list,set,map

ex:
class Main
{
    public static void main(String args[])
    {
        int arr[]={1,2,3,4,5};
        for(int num :arr)
        {
            System.out.print(num+" ");
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------
=>Print Pattern: 
         *
       * * *
     * * * * *
   * * * * * * *
 * * * * * * * * *
=> just like above code but i am just adding extra spaces.
like for 1st element = 4
        2nd element = 3, 3rd elemt=2 , 2nd element = 1 spaces means,
        k=i;k<n;k++
    here the space is occuring only based on i like i=1=>5, i=2=>3, i=3=>2...
     
class Main
{
    public static void main(String args[])
    {
       int n=5;
       for(int i=1;i<=n;i++)
       {
           for(int j=i;j<n;j++)
           {
               System.out.print("  ");
           }
           for(int j=1;j<=(i*2-1);j++)
           {
              
               System.out.print(" *");
           }
           System.out.println();
       }
    }
}
---------------------------------------------------------------------------------------------------------
pattern:
*******
 *****
  ***
   *
=>Just reverse of a previous problem.

class Main
{
    public static void main(String args[])
    {
       int n=5;
       for(int i=n;i>=1;i--)
       {
           for(int k=n;k>i;k--)
           {
               System.out.print(" ");
           }
           for(int j=1;j<=2*i-1;j++)
           {
               System.out.print("*");
           }
           System.out.println();
       }
    }
}

-------------------------------------------------------------------------------------------------
pattern:
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
=> just combine the above two codes but when combing the top row of down side will reduce just see it.

code: 
class Main
{
    public static void main(String args[])
    {
       int n=5;
       for(int i=1;i<=n;i++)
       {
           for(int k=i;k<n;k++)
           {
               System.out.print(" ");
           }
           for(int j=1;j<=2*i-1;j++)
           {
               System.out.print("*");
           }
           System.out.println();
       }
       
       for(int i=n-1;n>=1;i--)
       {
           for(int k=n;k>i;k--)
           {
               System.out.print(" ");
           }
           for(int j=1;j<=2*i-1;j++)
           {
               System.out.print("*");
           }
           System.out.println();
       }
    }
}
-------------------------------------------------------------------------------------
pattern: 

*********
 *******
  *****
   ***
    *
   ***
  *****
 *******
*********
=>Just change the positions of previous pattern.
code: 
class Main
{
    public static void main(String args[])
    {
        int n=5;
        for(int i=n;i>=1;i--)
        {
            for(int j=n;j>i;j--)
            {
                System.out.print(" ");
            }
            for(int k=1;k<=2*i-1;k++)
            {
                System.out.print("*");
            }
        System.out.println();
        }
        
        for(int i=2;i<=n;i++)
        {
            for(int k=i;k<n;k++)
            {
                System.out.print(" ");
            }
            for(int j=1;j<=2*i-1;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
        
    }
}
