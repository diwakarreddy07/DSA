*** Sliding Window ***

=> In the the window can increase or sinc.

steps:
=> Intialize l and r pointers at 0 index.
=> Create a Set to store non duplicates.
=> run the loop from r-lenght()-1.
=> check r characters in the set, if found remove l value and increase the l by 1 =>l++
=> if r element is not found then , then add the character into set. and increse the r.
=> Compare the maxlength with current distance length(right-left+1);
=> return maxLength.

Code:

import java.util.*;
class Main {
    public static void main(String[] args) {
        String str="abcabcbb";
        int len=find(str);
        System.out.println(len);
    }
   
   static int find(String str)
   {
       int left=0;
       int max=0;
       Set<Character> st=new HashSet<>();
       
       for(int right=0;right<str.length();right++)
       {
           while(st.contains(str.charAt(right)))
           {
               st.remove(str.charAt(left));
               left++;
           }
           st.add(str.charAt(right));
           
           max=Math.max(max,right-left+1);
           
       }
       return max;
   }
}

_____________________________________________________________________________________________________________________________________
1004. Max Consecutive Ones III

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6

code: 
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    public static void main(String[] args) {
       int arr[]={1,1,1,0,0,0,1,1,1,1,0};
        int key=2;
        int res=find(arr,key);
        System.out.print(res);
    }
    static int find(int[] arr,int key)
    {
        int left=0;
        int max=0;
        int zeros=0;
        
        for(int right=0;right<arr.length;right++)
        {
            if(arr[right]==0)
            {
                zeros++;
            }
            if(zeros>key)
            {
                if(arr[left]==0)
                {
                    zeros--;
                }
                left++;
            }
            max=Math.max(max,right-left+1);
        }
        return max;
    }
}

________________________________________________________________________________________________________________________________________

Greedy

Q: N-Meetings in a room.
Q: Job Scheduling.
Q: 0-1 fractional Knapsack.

*** N-Meetings in a Room ****

Input= N=6, start[]={1,3,0,5,8,5}, end={2,4,5,7,9,9}
output: 1 2 4 5

Explanation:

=> In a room, we have to conduct maximum possible meetings from all meetings.
=> types:
   * return maximum meetings.
   * return pairs.(Ending time of current meeting is strictly lesser to the starting time of next Meeting).
   * ending time of current meeting and starting time of next meeting can be same.
  * Duplicate meetings Accepted.

*** 0-1 Knapsack ***

Eg: 
input: N=3, w=50, values[]={100,60,120,}, weight[]={20,10,30}.

*** Job Scheduling ***

input: N=4, Jobs={(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
output: 2 60
